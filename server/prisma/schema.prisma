// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String // bcrypt hash
  role     String  @default("USER") // USER, ADMIN
  active   Boolean @default(true)

  // Plan & Limits
  plan       String @default("FREE") // FREE, PRO, ENTERPRISE
  planLimits Json   @default("{\"instances\":1,\"messages_per_day\":100,\"broadcasts\":false,\"templates\":3,\"team_members\":1}") // Plan limits
  usageStats Json   @default("{\"messages_today\":0,\"last_reset\":\"1970-01-01T00:00:00.000Z\"}") // Daily usage tracking

  // Stripe
  stripeCustomerId String? @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  instances        WhatsAppInstance[]
  settings         UserSettings?
  messageTemplates MessageTemplate[]
  campaigns        Campaign[]
  subscriptions    Subscription[]
  invoices         Invoice[]
  paymentMethods   PaymentMethod[]

  @@map("users")
}

model WhatsAppInstance {
  id                    String  @id @default(cuid())
  name                  String
  evolutionInstanceName String  @unique
  status                String  @default("PENDING") // InstanceStatus: PENDING, DISCONNECTED, CONNECTING, CONNECTED, ERROR
  connected             Boolean @default(false)

  // Evolution API Configuration
  evolutionApiUrl String
  evolutionApiKey String

  // Optional configurations
  webhook     String?
  qrCode      String?
  lastSeen    DateTime?
  connectedAt DateTime?

  // User ownership
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages      Message[]
  conversations Conversation[]
  campaigns     Campaign[]

  @@map("whatsapp_instances")
}

model Message {
  id          String  @id @default(cuid())
  instanceId  String
  remoteJid   String // WhatsApp contact ID
  fromMe      Boolean
  messageType String // MessageType: TEXT, IMAGE, VIDEO, AUDIO, DOCUMENT, STICKER, LOCATION, CONTACT, UNKNOWN
  content     String
  mediaUrl    String?
  fileName    String?
  caption     String?
  senderName  String? // Nome de quem enviou (importante para grupos)

  // WhatsApp message data
  messageId String   @unique
  timestamp DateTime

  // Message status tracking (Evolution API v2.3.6+)
  status String? @default("PENDING") // PENDING, SENT, DELIVERED, READ, PLAYED, FAILED

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  instance       WhatsAppInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  conversationId String

  // Performance indexes
  @@index([instanceId])
  @@index([conversationId, timestamp(sort: Desc)]) // Timeline de mensagens por conversa
  @@index([remoteJid])
  @@index([instanceId, timestamp(sort: Desc)]) // Timeline global por instância
  @@index([conversationId, fromMe]) // Filtrar mensagens enviadas/recebidas
  @@index([status]) // Rastrear status de mensagens
  @@map("messages")
}

model Conversation {
  id         String @id @default(cuid())
  instanceId String
  remoteJid  String // WhatsApp contact ID

  // Contact information
  nickname       String? // User-editable custom name (priority 1)
  contactName    String? // WhatsApp pushName (priority 2)
  contactPicture String?
  isGroup        Boolean @default(false)

  // Conversation state
  lastMessage   String?
  lastMessageAt DateTime?
  unreadCount   Int       @default(0)
  isArchived    Boolean   @default(false)
  isPinned      Boolean   @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  instance WhatsAppInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([instanceId, remoteJid])
  // Performance indexes
  @@index([instanceId, lastMessageAt(sort: Desc)]) // Lista ordenada por última mensagem
  @@index([instanceId, isPinned, lastMessageAt(sort: Desc)]) // Conversas fixadas no topo
  @@index([instanceId, isArchived]) // Filtrar conversas arquivadas
  @@index([instanceId, unreadCount]) // Ordenar por não lidas
  @@index([remoteJid])
  @@map("conversations")
}

model WebhookEvent {
  id         String  @id @default(cuid())
  instanceId String
  eventType  String
  data       String // JSON data stored as String for SQLite compatibility
  processed  Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_events")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique

  // Profile Settings
  displayName    String?
  profilePicture String?
  bio            String?

  // Theme Settings
  theme    String @default("light") // light, dark, auto
  language String @default("pt-BR")

  // Notification Settings
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  soundNotifications    Boolean @default(true)
  notificationFrequency String  @default("immediate") // immediate, hourly, daily

  // Auto-refresh Settings
  autoRefresh         Boolean @default(true)
  autoRefreshInterval Int     @default(30) // seconds

  // Privacy Settings
  showOnlineStatus    Boolean @default(true)
  allowDataCollection Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model MessageTemplate {
  id       String  @id @default(cuid())
  userId   String
  name     String
  content  String  @db.Text
  category String? // greeting, farewell, follow_up, promotional, support, custom

  // Usage tracking
  usageCount Int @default(0)

  // Template variables (stored as JSON array of variable names)
  variables String? @db.Text // JSON: ["nome", "empresa", "produto"]

  // Media attachment
  mediaUrl  String?
  mediaType String? // image, video, audio, document

  // Organization
  tags       String? @db.Text // JSON: ["vip", "new_customer"]
  isFavorite Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@index([userId])
  @@index([category])
  @@map("message_templates")
}

model Campaign {
  id         String @id @default(cuid())
  userId     String
  name       String
  status     String @default("DRAFT") // DRAFT, SCHEDULED, RUNNING, PAUSED, COMPLETED, FAILED
  instanceId String

  // Campaign content
  templateId String? // Optional: use template
  message    String  @db.Text
  mediaUrl   String?
  mediaType  String? // image, video, audio, document

  // Scheduling
  scheduledFor DateTime?
  startedAt    DateTime?
  completedAt  DateTime?

  // Progress tracking
  totalRecipients Int @default(0)
  sentCount       Int @default(0)
  deliveredCount  Int @default(0)
  failedCount     Int @default(0)
  pendingCount    Int @default(0)

  // Rate limiting (messages per minute)
  rateLimit Int @default(10)

  // Recipients CSV
  recipientsData String? @db.Text // JSON array of recipients with variables

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  instance WhatsAppInstance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messages CampaignMessage[]
  template MessageTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([instanceId])
  @@map("campaigns")
}

model CampaignMessage {
  id         String @id @default(cuid())
  campaignId String
  recipient  String // Phone number
  status     String @default("PENDING") // PENDING, SENT, DELIVERED, FAILED
  message    String @db.Text // Rendered message with variables

  // Message variables for this recipient
  variables String? @db.Text // JSON object with recipient-specific data

  // Evolution API message ID
  messageId String?

  // Error tracking
  error       String?
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  lastRetryAt DateTime?

  // Timestamps
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([status])
  @@index([recipient])
  @@map("campaign_messages")
}

model WebhookLog {
  id         String   @id @default(cuid())
  instanceId String
  event      String // messages.upsert, messages.update, etc
  
  // Raw webhook data (JSON completo)
  rawData    Json
  
  // Campos específicos para análise @lid
  remoteJid       String?
  remoteJidAlt    String?
  participant     String?
  participantAlt  String?
  messageId       String?
  
  // Flags para facilitar queries
  hasLid          Boolean @default(false)
  hasAltField     Boolean @default(false)
  
  createdAt  DateTime @default(now())

  @@index([instanceId])
  @@index([event])
  @@index([hasLid])
  @@index([remoteJid])
  @@index([createdAt])
  @@map("webhook_logs")
}

// Billing & Subscriptions
model Subscription {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe IDs
  stripeCustomerId      String
  stripeSubscriptionId  String  @unique
  stripePriceId         String
  
  // Subscription details
  plan             String  // FREE, STARTER, PRO, BUSINESS
  status           String  // active, canceled, past_due, unpaid, trialing
  
  // Pricing
  amount           Int     // Amount in cents (e.g., 4700 = R$ 47.00)
  currency         String  @default("brl")
  interval         String  @default("month") // month, year
  
  // Dates
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@map("subscriptions")
}

model Invoice {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe IDs
  stripeInvoiceId   String   @unique
  stripeCustomerId  String
  
  // Invoice details
  amount            Int      // Amount in cents
  currency          String   @default("brl")
  status            String   // draft, open, paid, void, uncollectible
  
  // Payment
  paid              Boolean  @default(false)
  paidAt            DateTime?
  
  // Invoice info
  invoiceNumber     String?
  invoicePdfUrl     String?
  hostedInvoiceUrl  String?
  
  // Dates
  periodStart       DateTime
  periodEnd         DateTime
  dueDate           DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@index([paid])
  @@map("invoices")
}

model PaymentMethod {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe IDs
  stripePaymentMethodId String @unique
  
  // Card details
  type                String   // card, boleto
  cardBrand           String?  // visa, mastercard, amex, etc
  cardLast4           String?
  cardExpMonth        Int?
  cardExpYear         Int?
  
  // Default payment method
  isDefault           Boolean  @default(false)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([userId])
  @@index([stripePaymentMethodId])
  @@map("payment_methods")
}

// SQLite doesn't support enums, so we use string literals
// InstanceStatus: PENDING, DISCONNECTED, CONNECTING, CONNECTED, ERROR
// MessageType: TEXT, IMAGE, VIDEO, AUDIO, DOCUMENT, STICKER, LOCATION, CONTACT, UNKNOWN

