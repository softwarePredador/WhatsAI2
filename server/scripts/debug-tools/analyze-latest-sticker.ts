import { PrismaClient } from '@prisma/client';
import axios from 'axios';

const prisma = new PrismaClient();

async function analyzeLatestSticker() {
  // Buscar o √∫ltimo sticker (mais recente)
  const sticker = await prisma.message.findFirst({
    where: {
      conversationId: 'cmhdp2zzg0029wu5wmof2mxsi',
      messageType: 'STICKER'
    },
    orderBy: { timestamp: 'desc' }
  });

  if (!sticker) {
    console.log('‚ùå Nenhum sticker encontrado');
    return;
  }

  console.log('üéâ ANALISANDO √öLTIMO STICKER\n');
  console.log('üì¶ Informa√ß√µes:');
  console.log(`   Message ID: ${sticker.messageId}`);
  console.log(`   DB ID: ${sticker.id}`);
  console.log(`   Timestamp: ${sticker.timestamp}`);
  console.log(`   Media URL: ${sticker.mediaUrl}`);

  // Buscar webhook
  const webhook = await (prisma as any).webhookLog.findFirst({
    where: { messageId: sticker.messageId }
  });

  if (!webhook) {
    console.log('\n‚ùå Webhook n√£o encontrado');
    await prisma.$disconnect();
    return;
  }

  const messageData = webhook.rawData.data;
  const stickerMsg = messageData?.message?.stickerMessage;

  console.log('\nüìä Dados do Webhook:');
  console.log(`   Tamanho original: ${stickerMsg?.fileLength?.low} bytes (${(stickerMsg?.fileLength?.low / 1024).toFixed(2)} KB)`);
  console.log(`   MimeType: ${stickerMsg?.mimetype}`);
  console.log(`   isAnimated (campo WhatsApp): ${stickerMsg?.isAnimated ?? 'undefined'}`);

  // Verificar tamanho na CDN
  if (sticker.mediaUrl) {
    try {
      const response = await axios.head(sticker.mediaUrl);
      const cdnSize = parseInt(response.headers['content-length'] || '0');
      const originalSize = stickerMsg?.fileLength?.low || 0;
      const reduction = originalSize > 0 ? ((originalSize - cdnSize) / originalSize * 100).toFixed(2) : '0';

      console.log('\nüîç Compara√ß√£o de tamanho:');
      console.log(`   Original WhatsApp: ${originalSize} bytes (${(originalSize / 1024).toFixed(2)} KB)`);
      console.log(`   Processado CDN: ${cdnSize} bytes (${(cdnSize / 1024).toFixed(2)} KB)`);
      console.log(`   Redu√ß√£o: ${reduction}%`);

      console.log('\nüéØ AN√ÅLISE FINAL:');
      if (cdnSize >= originalSize * 0.95) {
        console.log('   ‚úÖ ‚úÖ ‚úÖ ANIMA√á√ÉO PRESERVADA! (tamanho mantido ~100%)');
        console.log('   ‚úÖ O c√≥digo est√° funcionando PERFEITAMENTE!');
        console.log('   ‚úÖ Sharp detectou WebP animado e N√ÉO otimizou!');
      } else if (parseFloat(reduction) > 50) {
        console.log('   ‚ö†Ô∏è  POSS√çVEL PERDA DE ANIMA√á√ÉO (redu√ß√£o >50%)');
        console.log('   ‚ùå C√≥digo pode n√£o ter detectado anima√ß√£o');
        console.log('   üí° Verifique os logs do servidor para ver se apareceu "üé¨ [ANIMATED_STICKER]"');
      } else {
        console.log('   ‚úÖ Otimiza√ß√£o normal para sticker est√°tico');
        console.log(`   ‚ÑπÔ∏è  Redu√ß√£o de ${reduction}% √© esperada para imagens WebP est√°ticas`);
      }
    } catch (err: any) {
      console.log('\n‚ùå Erro ao verificar CDN:', err.message);
    }
  }

  await prisma.$disconnect();
}

analyzeLatestSticker().catch(console.error);
